I"¯ä<ul>
  <li>tl;dr: (<a href="http://rolandtanglao.com/2023/01/04/p1-thank-you-element-matrix/">Looking for work! Hire me</a> :-) !): I sample the last 50 photos uploaded to flickr every 30 seconds using the <a href="https://www.flickr.com/services/api/flickr.photos.search.html">flickr API</a> and slice them into a 1px x 640px slice and concatenate those slices into a daily flickr worldwide barcode. Check it out at: <a href="https://rytbarcode.ngrok.io/">https://rytbarcode.ngrok.io/</a> userid:<code class="language-plaintext highlighter-rouge">barcodes</code> password: <code class="language-plaintext highlighter-rouge">rock2023</code> (change the <code class="language-plaintext highlighter-rouge">o</code> to zero i.e. <code class="language-plaintext highlighter-rouge">0</code>) (<a href="https://www.flickr.com/photos/roland/albums/72177720305856040">flickr archive of the barcodes</a>) Big thanks to <a href="https://ngrok.com/">ngrok</a> for the trial enterprise plan! ngrok is indeed ‚ÄúOnline in 1 line‚Äù! Super great!</li>
</ul>

<h3 id="details">Details</h3>

<ul>
  <li>Since I am <a href="http://rolandtanglao.com/2023/01/04/p1-thank-you-element-matrix/">looking for work as a support engineer on apps and frameworks like Matrix, Firefox, Thunderbird, Drupal, etc.</a>,  I have some spare time when my daily job search tasks are done.</li>
  <li>Ever since I made a <a href="http://rolandtanglao.com/2011/04/25/penmachine-dodging-buses-barcode-video-and-html5-web-app/">barcode</a> for the fabulous Derek Miller (RIP, check out his website <a href="https://penmachine.com/">penmachine.com</a>), I‚Äôve always wanted to make a barcode for flickr.</li>
  <li>I dedicate this barcode to <a href="https://darrenbarefoot.com/">Darren Barefoot</a>, who has has been an inspiration to me and many others in the Vancouver tech community, and who wrote one of his many great blog posts about this back in 2011: <a href="https://darrenbarefoot.com/2011/03/06/i-made-my-own-movie-bar-code/">Darren Barefoot:I made my own movie bar code</a></li>
  <li>What is is it? I sample the 50 last uploaded photos every 30 seconds using the flickr API and slice them into a 1px x 640px slice and concatenate those slices into a daily flickr worldwide barcode</li>
  <li>Please check it out at: <a href="https://rytbarcode.ngrok.io/">https://rytbarcode.ngrok.io/</a> userid:<code class="language-plaintext highlighter-rouge">barcodes</code> password: <code class="language-plaintext highlighter-rouge">rock2023</code> (change the <code class="language-plaintext highlighter-rouge">o</code> to zero i.e. <code class="language-plaintext highlighter-rouge">0</code>) (<a href="https://www.flickr.com/photos/roland/albums/72177720305856040">flickr archive of the barcodes</a>) Big thanks to ngrok for the trial enterprise plan! ngrok is indeed ‚ÄúOnline in 1 line‚Äù! Super great! Thanks ngrok folks I don‚Äôt know how long my enterprise trial will last but it should be up for a week or two after which maybe I will move to their hobbyist plan and/or another comparable service like <a href="https://tailscale.com/">%ailscale</a> <a href="https://tailscale.com/blog/introducing-tailscale-funnel/">Funnel</a>. Not sure yet :-)</li>
</ul>

<h3 id="pretentious-colophon--">Pretentious colophon :-)</h3>

<h4 id="ruby-script">Ruby script</h4>
<ul>
  <li>I wrote a ruby script, <a href="https://github.com/rtanglao/rt-flickr-worldwide-barcode/blob/main/getLastFewWorldWidePhotos.rb">getLastFewWorldWidePhotos.rb</a>, to download the photos using the <a href="https://www.flickr.com/services/api/flickr.photos.search.html">flickr.photos.search API</a> which has always been and continues to be amazing. Since I don‚Äôt trust Github to be around longer than my blog, the code is at the end of this blog post.</li>
  <li>I run this script on a Raspberry Pi 400 running Debian bullseye as follows:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> :<span class="p">;</span> <span class="k">do</span> ./getLastFewWorldWidePhotos.rb <span class="p">;</span> <span class="nb">sleep </span>30<span class="p">;</span> <span class="k">done</span>
</code></pre></div>    </div>
  </li>
  <li>The script creates a daily barcode called <code class="language-plaintext highlighter-rouge">barcode/barcode.png</code> using the <code class="language-plaintext highlighter-rouge">rmagick</code> ruby gem (front end for the amazing <a href="https://imagemagick.org/">imagemagick</a> which I‚Äôve used for information visualization for <a href="http://rolandtanglao.com/2011/04/19/imagemagick-montage-on-4600-photos-running-for-36-hours-alternatives/">over a decade</a>) to slice the the photos into 1 pixel by 640 pixel slice and then appends it to the daily barcode.
    <ul>
      <li>There are never enough examples of rmagick and imagemagic so here‚Äôs the ruby code fragment you need to append a 1 pixel slice to the daily barcode using <code class="language-plaintext highlighter-rouge">montage</code>:
        <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">image_list</span> <span class="o">=</span> <span class="no">Magick</span><span class="o">::</span><span class="no">ImageList</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">DAILY_BARCODE_FILEPATH</span><span class="p">,</span> <span class="no">BARCODE_SLICE</span><span class="p">)</span>
  <span class="n">montaged_images</span> <span class="o">=</span> <span class="n">image_list</span><span class="p">.</span><span class="nf">montage</span> <span class="p">{</span> <span class="o">|</span><span class="n">image</span><span class="o">|</span> <span class="n">image</span><span class="p">.</span><span class="nf">tile</span> <span class="o">=</span> <span class="s1">'2x1'</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="nf">geometry</span> <span class="o">=</span> <span class="s1">'+0+0'</span> <span class="p">}</span>
  <span class="n">montaged_images</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="no">DAILY_BARCODE_FILEPATH</span><span class="p">)</span>
<span class="c1"># 2x1 means 2 images horizontally i.e. 1. the current barcode </span>
<span class="c1"># and 2. the barcode to append and  1 image vertically</span>
<span class="c1"># +0+0 means make the image at the origin not some funky default :-)</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>It also keeps a copy of the daily barcode in a filed called <code class="language-plaintext highlighter-rouge">barcode/&lt;yyyy/&lt;mm&gt;/&lt;dd&gt;/&lt;yyyy&gt;-&lt;mm&gt;-&lt;dd&gt;.png</code> e.g. for Feb 8 2023: <code class="language-plaintext highlighter-rouge">barcode/2023/02/08/2023-02-08.png</code></li>
  <li>The script (and the entire system!) could be improved of course but hey it‚Äôs my job to look for a job not to code this script! e.g. the exception handling, redundant checking File system checks, etc</li>
</ul>

<h3 id="rust-static-web-server">Rust static web server</h3>

<ul>
  <li>On the same Raspberry Pi 400, I run the <a href="https://github.com/static-web-server/static-web-server">rust static webserver</a> and serve up <code class="language-plaintext highlighter-rouge">barcode.png</code>. Why rust? And this webserver? Just for fun really: Any static webserver would do :-) of course!
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>static-web-server <span class="nt">--port</span> 8080 <span class="nt">--root</span> ~/Documents/GIT/rtbarcodewebsite/ &amp; 
</code></pre></div>    </div>
  </li>
  <li>And I expose it to the world using ngrok
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ngrok http 8080 <span class="nt">--subdomain</span> rytbarcode <span class="nt">--basic-auth-</span><span class="o">=</span>barcodes:passwordredacted
</code></pre></div>    </div>
  </li>
  <li>The home page just <a href="http://rolandtanglao.com/2023/02/07/p1-how-to-refresh-img-webpage-using-javascript/">auto-refreshes</a> the png every 5 seconds using <code class="language-plaintext highlighter-rouge">fetch()</code> in Javascript. The code is at the end of this page. Thanks <a href="https://yoric.github.io/">Yoric</a> and <a href="https://brendan.abolivier.bzh/">Brendan</a>!</li>
</ul>

<h3 id="previously">Previously</h3>
<ul>
  <li>February 7, 2023: <a href="http://rolandtanglao.com/2023/02/07/p1-how-to-refresh-img-webpage-using-javascript/">How To refresh an image in place on a web page using JavaScript</a></li>
  <li>February 5, 2023: <a href="http://rolandtanglao.com/2023/02/05/p1-softcreatr-imagemagick-easy-install-ubuntu-debian-how-to/">SoftCreatR‚Äôs Imagemagick Easy install for Ubuntu and Debian aka ‚Äòimei‚Äô worked for me on my Raspberry Pi 400 running Debian bullseye</a></li>
  <li>December 10, 2022: <a href="http://rolandtanglao.com/2022/12/10/p1-tailscale-funnel-ideal-for-home-hosted-experimental-software/">Tailscale Funnel is a reverse proxy service complete with TLS cert, DNS, public IP address and HTTPS server that seems perfect for small, experimental software on the internet like snac2</a></li>
  <li>April 25, 2011: <a href="http://rolandtanglao.com/2011/04/25/penmachine-dodging-buses-barcode-video-and-html5-web-app/">penmachine dodging buses barcode video &amp; HTML5 Web App</a></li>
  <li>April 20, 2011 <a href="http://rolandtanglao.com/2011/04/20/penmachine-barcode-1-1/">Penmachine barcode 1.1</a></li>
</ul>

<h3 id="ruby-code-getlastfewworldwidephotosrb">Ruby code: getLastFewWorldWidePhotos.rb</h3>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env ruby</span>
<span class="c1"># frozen_string_literal: true</span>

<span class="nb">require</span> <span class="s1">'rubygems'</span>
<span class="nb">require</span> <span class="s1">'bundler/setup'</span>
<span class="nb">require</span> <span class="s1">'typhoeus'</span>
<span class="nb">require</span> <span class="s1">'amazing_print'</span>
<span class="nb">require</span> <span class="s1">'time'</span>
<span class="nb">require</span> <span class="s1">'date'</span>
<span class="nb">require</span> <span class="s1">'logger'</span>
<span class="nb">require</span> <span class="s1">'io/console'</span>
<span class="nb">require</span> <span class="s1">'parseconfig'</span>
<span class="nb">require</span> <span class="s1">'fileutils'</span>
<span class="nb">require</span> <span class="s1">'pry'</span>
<span class="nb">require</span> <span class="s1">'pry-byebug'</span>
<span class="nb">require</span> <span class="s1">'tzinfo'</span>
<span class="nb">require</span> <span class="s1">'down/http'</span>
<span class="nb">require</span> <span class="s1">'json'</span>
<span class="nb">require</span> <span class="s1">'rmagick'</span>

<span class="kp">include</span> <span class="no">Magick</span>

<span class="k">def</span> <span class="nf">get_flickr_response</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">_logger</span><span class="p">)</span>
  <span class="n">url</span> <span class="o">=</span> <span class="s2">"https://api.flickr.com/</span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="s2">"</span>
  <span class="n">try_count</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">begin</span>
    <span class="n">result</span> <span class="o">=</span> <span class="no">Typhoeus</span><span class="o">::</span><span class="no">Request</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
      <span class="n">url</span><span class="p">,</span>
      <span class="ss">params: </span><span class="n">params</span>
    <span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">body</span><span class="p">)</span>
  <span class="k">rescue</span> <span class="no">JSON</span><span class="o">::</span><span class="no">ParserError</span>
    <span class="n">try_count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="n">try_count</span> <span class="o">&lt;</span> <span class="mi">4</span>
      <span class="n">logger</span><span class="p">.</span><span class="nf">debug</span> <span class="s2">"JSON::ParserError exception, retry:</span><span class="si">#{</span><span class="n">try_count</span><span class="si">}</span><span class="s2">"</span>
      <span class="nb">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
      <span class="k">retry</span>
    <span class="k">else</span>
      <span class="n">logger</span><span class="p">.</span><span class="nf">debug</span> <span class="s1">'JSON::ParserError exception, retrying FAILED'</span>
      <span class="n">x</span> <span class="o">=</span> <span class="kp">nil</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="n">x</span>
<span class="k">end</span>

<span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vg">$stderr</span><span class="p">)</span>
<span class="n">logger</span><span class="p">.</span><span class="nf">level</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">::</span><span class="no">DEBUG</span>

<span class="n">flickr_config</span> <span class="o">=</span> <span class="no">ParseConfig</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'flickr.conf'</span><span class="p">).</span><span class="nf">params</span>
<span class="n">api_key</span> <span class="o">=</span> <span class="n">flickr_config</span><span class="p">[</span><span class="s1">'api_key'</span><span class="p">]</span>

<span class="no">TEN_MINUTES_IN_SECONDS</span> <span class="o">=</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">10</span>
<span class="no">BEGIN_TIME</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">to_i</span> <span class="o">-</span> <span class="no">TEN_MINUTES_IN_SECONDS</span>
<span class="n">logger</span><span class="p">.</span><span class="nf">debug</span> <span class="s2">"BEGIN: </span><span class="si">#{</span><span class="no">BEGIN_TIME</span><span class="p">.</span><span class="nf">ai</span><span class="si">}</span><span class="s2">"</span>
<span class="n">begin_mysql_time</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="no">BEGIN_TIME</span><span class="p">).</span><span class="nf">strftime</span><span class="p">(</span><span class="s1">'%Y-%m-%d %H:%M:%S'</span><span class="p">)</span>

<span class="n">extras_str</span> <span class="o">=</span> <span class="s1">'date_upload,url_l'</span>

<span class="n">flickr_url</span> <span class="o">=</span> <span class="s1">'services/rest/'</span>
<span class="n">logger</span><span class="p">.</span><span class="nf">debug</span> <span class="s2">"begin_mysql_time:</span><span class="si">#{</span><span class="n">begin_mysql_time</span><span class="si">}</span><span class="s2">"</span>

<span class="no">NUM_PHOTOS_TO_DOWNLOAD</span> <span class="o">=</span> <span class="mi">50</span>

<span class="n">url_params</span> <span class="o">=</span>
  <span class="p">{</span>
    <span class="ss">method: </span><span class="s1">'flickr.photos.search'</span><span class="p">,</span>
    <span class="ss">media: </span><span class="s1">'photos'</span><span class="p">,</span> <span class="c1"># Just photos no videos</span>
    <span class="ss">content_type: </span><span class="mi">1</span><span class="p">,</span> <span class="c1"># Just photos, no videos, screenshots, etc</span>
    <span class="ss">api_key: </span><span class="n">api_key</span><span class="p">,</span>
    <span class="ss">format: </span><span class="s1">'json'</span><span class="p">,</span>
    <span class="ss">nojsoncallback: </span><span class="s1">'1'</span><span class="p">,</span>
    <span class="ss">extras: </span><span class="n">extras_str</span><span class="p">,</span>
    <span class="ss">sort: </span><span class="s1">'date-posted-desc'</span><span class="p">,</span>
    <span class="ss">per_page: </span><span class="no">NUM_PHOTOS_TO_DOWNLOAD</span><span class="p">,</span>
    <span class="ss">page: </span><span class="mi">1</span><span class="p">,</span>
    <span class="c1"># Looks like unix time support is broken so use mysql time</span>
    <span class="ss">min_upload_date: </span><span class="n">begin_mysql_time</span>
  <span class="p">}</span>
<span class="n">photos_on_this_page</span> <span class="o">=</span> <span class="n">get_flickr_response</span><span class="p">(</span><span class="n">flickr_url</span><span class="p">,</span> <span class="n">url_params</span><span class="p">,</span> <span class="n">logger</span><span class="p">)</span>
<span class="n">logger</span><span class="p">.</span><span class="nf">debug</span> <span class="s2">"STATUS from flickr API:</span><span class="si">#{</span><span class="n">photos_on_this_page</span><span class="p">[</span><span class="s1">'stat'</span><span class="p">]</span><span class="si">}</span><span class="s2"> num_pages:\
  </span><span class="si">#{</span><span class="n">photos_on_this_page</span><span class="p">[</span><span class="s1">'photos'</span><span class="p">][</span><span class="s1">'pages'</span><span class="p">].</span><span class="nf">to_i</span><span class="si">}</span><span class="s2">"</span>
<span class="no">PARAMS_TO_KEEP</span> <span class="o">=</span> <span class="sx">%w[id dateupload url_l height_l width_l]</span>
<span class="n">photos</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">photos_on_this_page</span><span class="p">[</span><span class="s1">'photos'</span><span class="p">][</span><span class="s1">'photo'</span><span class="p">].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">photo</span><span class="o">|</span>
  <span class="c1"># logger.debug "photo from API: #{photo.ai}"</span>
  <span class="n">dateupload</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="n">photo</span><span class="p">[</span><span class="s1">'dateupload'</span><span class="p">].</span><span class="nf">to_i</span><span class="p">)</span>
  <span class="n">logger</span><span class="p">.</span><span class="nf">debug</span> <span class="s2">"dateupload:</span><span class="si">#{</span><span class="n">dateupload</span><span class="si">}</span><span class="s2">"</span>
  <span class="n">photo</span><span class="p">[</span><span class="s1">'id'</span><span class="p">]</span> <span class="o">=</span> <span class="n">photo</span><span class="p">[</span><span class="s1">'id'</span><span class="p">].</span><span class="nf">to_i</span>
  <span class="n">photo</span><span class="p">[</span><span class="s1">'dateupload'</span><span class="p">]</span> <span class="o">=</span> <span class="n">photo</span><span class="p">[</span><span class="s1">'dateupload'</span><span class="p">].</span><span class="nf">to_i</span>
  <span class="k">next</span> <span class="k">if</span> <span class="o">!</span><span class="n">photo</span><span class="p">.</span><span class="nf">has_key?</span><span class="p">(</span><span class="s1">'height_l'</span><span class="p">)</span> <span class="o">||</span> <span class="n">photo</span><span class="p">[</span><span class="s1">'height_l'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">640</span> <span class="c1"># Skip all photos that are less than 640px high.</span>

  <span class="n">photo_without_unnecessary_stuff</span> <span class="o">=</span> <span class="n">photo</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="o">*</span><span class="no">PARAMS_TO_KEEP</span><span class="p">)</span>
  <span class="n">logger</span><span class="p">.</span><span class="nf">debug</span> <span class="s2">"photo without unnecessary stuff: </span><span class="si">#{</span><span class="n">photo_without_unnecessary_stuff</span><span class="p">.</span><span class="nf">ai</span><span class="si">}</span><span class="s2">"</span>
  <span class="n">photos</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="n">photo_without_unnecessary_stuff</span><span class="p">)</span>
<span class="k">end</span>
<span class="n">photos</span><span class="p">.</span><span class="nf">sort!</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span> <span class="n">a</span><span class="p">[</span><span class="s1">'dateupload'</span><span class="p">]</span> <span class="o">&lt;=&gt;</span> <span class="n">b</span><span class="p">[</span><span class="s1">'dateupload'</span><span class="p">]</span> <span class="p">}</span>
<span class="c1"># Get last photo and figure out the date for the Pacific timezone</span>
<span class="c1"># and skip prior dates (if there are any)</span>
<span class="n">last</span> <span class="o">=</span> <span class="n">photos</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="n">tz</span> <span class="o">=</span> <span class="no">TZInfo</span><span class="o">::</span><span class="no">Timezone</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s1">'America/Vancouver'</span><span class="p">)</span>
<span class="n">localtime</span> <span class="o">=</span> <span class="n">tz</span><span class="p">.</span><span class="nf">to_local</span><span class="p">(</span><span class="no">Time</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="n">last</span><span class="p">[</span><span class="s1">'dateupload'</span><span class="p">]))</span>
<span class="n">localyyyy</span> <span class="o">=</span> <span class="n">localtime</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="s1">'%Y'</span><span class="p">).</span><span class="nf">to_i</span>
<span class="n">localmm</span> <span class="o">=</span> <span class="n">localtime</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="s1">'%m'</span><span class="p">).</span><span class="nf">to_i</span>
<span class="n">localdd</span> <span class="o">=</span> <span class="n">localtime</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="s1">'%d'</span><span class="p">).</span><span class="nf">to_i</span>
<span class="n">startdate</span> <span class="o">=</span> <span class="n">tz</span><span class="p">.</span><span class="nf">local_time</span><span class="p">(</span><span class="n">localyyyy</span><span class="p">,</span> <span class="n">localmm</span><span class="p">,</span> <span class="n">localdd</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">).</span><span class="nf">to_i</span>
<span class="n">photos</span><span class="p">.</span><span class="nf">reject!</span> <span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="p">[</span><span class="s1">'dateupload'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">startdate</span> <span class="p">}</span>
<span class="nb">exit</span> <span class="k">if</span> <span class="n">photos</span><span class="p">.</span><span class="nf">length</span><span class="p">.</span><span class="nf">zero?</span>
<span class="no">BARCODE_SLICE</span> <span class="o">=</span> <span class="s1">'/tmp/resized.png'</span>
<span class="no">HEIGHT</span> <span class="o">=</span> <span class="mi">640</span>
<span class="no">WIDTH</span> <span class="o">=</span> <span class="mi">1</span>
<span class="c1"># Create barcode/yyyy/mm/dd directory if it doesn't exist</span>
<span class="no">DIRECTORY</span> <span class="o">=</span> <span class="nb">format</span><span class="p">(</span>
  <span class="s1">'barcode/%&lt;yyyy&gt;4.4d/%&lt;mm&gt;2.2d/%&lt;dd&gt;2.2d'</span><span class="p">,</span>
  <span class="ss">yyyy: </span><span class="n">localyyyy</span><span class="p">,</span> <span class="ss">mm: </span><span class="n">localmm</span><span class="p">,</span> <span class="ss">dd: </span><span class="n">localdd</span>
<span class="p">)</span>
<span class="no">ID_FILEPATH</span> <span class="o">=</span> <span class="s2">"</span><span class="si">#{</span><span class="no">DIRECTORY</span><span class="si">}</span><span class="s2">/processed-ids.txt"</span>
<span class="no">BARCODE_FILEPATH</span> <span class="o">=</span> <span class="s1">'barcode/barcode.png'</span>
<span class="no">DAILY_BARCODE_FILEPATH</span> <span class="o">=</span> <span class="nb">format</span><span class="p">(</span>
  <span class="s1">'%&lt;dir&gt;s/%&lt;yyyy&gt;4.4d-%&lt;mm&gt;2.2d-%&lt;dd&gt;2.2d.png'</span><span class="p">,</span>
  <span class="ss">dir: </span><span class="no">DIRECTORY</span><span class="p">,</span> <span class="ss">yyyy: </span><span class="n">localyyyy</span><span class="p">,</span> <span class="ss">mm: </span><span class="n">localmm</span><span class="p">,</span> <span class="ss">dd: </span><span class="n">localdd</span>
<span class="p">)</span>
<span class="no">FileUtils</span><span class="p">.</span><span class="nf">mkdir_p</span> <span class="no">DIRECTORY</span>
<span class="n">processed_ids</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">processed_ids</span> <span class="o">=</span> <span class="no">IO</span><span class="p">.</span><span class="nf">readlines</span><span class="p">(</span><span class="no">ID_FILEPATH</span><span class="p">).</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">)</span> <span class="k">if</span> <span class="no">File</span><span class="p">.</span><span class="nf">exist?</span><span class="p">(</span><span class="no">ID_FILEPATH</span><span class="p">)</span>
<span class="n">photos</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">photo</span><span class="o">|</span>
  <span class="nb">id</span> <span class="o">=</span> <span class="n">photo</span><span class="p">[</span><span class="s1">'id'</span><span class="p">]</span>
  <span class="k">next</span> <span class="k">if</span> <span class="n">processed_ids</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>

  <span class="c1"># Download the thumbnail to /tmp</span>
  <span class="n">logger</span><span class="p">.</span><span class="nf">debug</span> <span class="s2">"DOWNLOADING </span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">"</span>
  <span class="c1"># 640 height files shouldn't be more than 1 MB!!!</span>
  <span class="n">retry_count</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">begin</span>
    <span class="n">tempfile</span> <span class="o">=</span> <span class="no">Down</span><span class="o">::</span><span class="no">Http</span><span class="p">.</span><span class="nf">download</span><span class="p">(</span><span class="n">photo</span><span class="p">[</span><span class="s1">'url_l'</span><span class="p">],</span> <span class="ss">max_size: </span><span class="mi">1</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">)</span>
  <span class="k">rescue</span> <span class="no">Down</span><span class="o">::</span><span class="no">ClientError</span><span class="p">,</span> <span class="no">Down</span><span class="o">::</span><span class="no">NotFound</span> <span class="o">=&gt;</span> <span class="n">e</span>
    <span class="n">retry_count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">retry</span> <span class="k">if</span> <span class="n">retry_count</span> <span class="o">&lt;</span> <span class="mi">3</span>
    <span class="k">next</span> <span class="c1">#raise(e) ie. skip the photo if we can't download it</span>
  <span class="k">end</span>
  <span class="n">thumb</span> <span class="o">=</span> <span class="no">Image</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">tempfile</span><span class="p">.</span><span class="nf">path</span><span class="p">).</span><span class="nf">first</span>
  <span class="n">resized</span> <span class="o">=</span> <span class="n">thumb</span><span class="p">.</span><span class="nf">resize</span><span class="p">(</span><span class="no">WIDTH</span><span class="p">,</span> <span class="no">HEIGHT</span><span class="p">)</span>
  <span class="n">resized</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="no">BARCODE_SLICE</span><span class="p">)</span>
  <span class="k">if</span> <span class="o">!</span><span class="no">File</span><span class="p">.</span><span class="nf">exist?</span><span class="p">(</span><span class="no">DAILY_BARCODE_FILEPATH</span><span class="p">)</span>
    <span class="no">FileUtils</span><span class="p">.</span><span class="nf">cp</span><span class="p">(</span><span class="no">BARCODE_SLICE</span><span class="p">,</span> <span class="no">DAILY_BARCODE_FILEPATH</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="n">image_list</span> <span class="o">=</span> <span class="no">Magick</span><span class="o">::</span><span class="no">ImageList</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">DAILY_BARCODE_FILEPATH</span><span class="p">,</span> <span class="no">BARCODE_SLICE</span><span class="p">)</span>
    <span class="n">montaged_images</span> <span class="o">=</span> <span class="n">image_list</span><span class="p">.</span><span class="nf">montage</span> <span class="p">{</span> <span class="o">|</span><span class="n">image</span><span class="o">|</span> <span class="n">image</span><span class="p">.</span><span class="nf">tile</span> <span class="o">=</span> <span class="s1">'2x1'</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="nf">geometry</span> <span class="o">=</span> <span class="s1">'+0+0'</span> <span class="p">}</span>
    <span class="n">montaged_images</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="no">DAILY_BARCODE_FILEPATH</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="no">File</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">tempfile</span><span class="p">.</span><span class="nf">path</span><span class="p">)</span>
  <span class="c1"># After the thumbnail is downloaded,  add the id to the file and to the array</span>
  <span class="c1"># so we don't download it again!</span>
  <span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="no">ID_FILEPATH</span><span class="p">,</span> <span class="s1">'a'</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">processed_ids</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
  <span class="no">FileUtils</span><span class="p">.</span><span class="nf">cp</span><span class="p">(</span><span class="no">DAILY_BARCODE_FILEPATH</span><span class="p">,</span> <span class="no">BARCODE_FILEPATH</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<h4 id="html-home-page">HTML home page</h4>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="c">&lt;!--
    Inspired by Darren Barefoot and Derek Miller. Thanks!
    http://rolandtanglao.com/2023/02/09/p1-worldwide-flickr-barcode
    https://darrenbarefoot.com/2011/03/06/i-made-my-own-movie-bar-code/
    Looking for work! Hire me: 
    http://rolandtanglao.com/2023/01/04/p1-thank-you-element-matrix/ :-) !
--&gt;</span>
<span class="nt">&lt;head&gt;</span>
<span class="nt">&lt;title&gt;</span>Worldwide Flickr Barcode<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;script&gt;</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nx">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Our `</span><span class="o">&lt;</span><span class="nx">img</span><span class="o">&gt;</span><span class="s2">`.
  let img = document.getElementById("barcode");

  // The url of the data that we download. Initially, we haven't downloaded any data,
  // so `</span><span class="kc">null</span><span class="s2">`.
  let objectURL = null;

  while (true) {
    // Wait 5 seconds.
    await new Promise(resolve =&gt; setTimeout(resolve, 5000));

    // Get the data.
    let response = await fetch("https://rytbarcode.ngrok.io/barcode.png", { cache: 'no-cache' });

    // For images, we want the response as a blob (Binary Large Object)
    let blob = await response.blob();
    if (objectURL) {
      // If we already have data, clean up the memory.
      URL.revokeObjectURL(objectURL);
    }

    // Convert the blob into a URL.
    objectURL = URL.createObjectURL(blob);

    // ...and point the `</span><span class="o">&lt;</span><span class="nx">img</span><span class="o">&gt;</span><span class="s2">` to this image.
    img.setAttribute("src", objectURL); 
  }
}
</span><span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;img</span> <span class="na">id=</span><span class="s">"barcode"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;script&gt;</span><span class="nx">loop</span><span class="p">();</span><span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>

</code></pre></div></div>
:ET