I"<h1 id="pontifications">Pontifications</h1>

<ul>
  <li>
    <p>“Robert O’Callahan: Actually, the funny thing is, while we designed rr to capture test and automation, it’s <em>mostly</em> being used now for other things—primarily for ordinary debugging, in  fact. On top of record-and-replay, you can simulate reverse execution by taking checkpoints of the program as it executes forward, and then  rolling back to a previous checkpoint and executing forward to any  desired state. When you combine that with hardware data watchpoints, you can see where some state in your program isn’t correct and then roll  back to look at the code responsible for that. Especially with C and C++ code, I think that almost amounts to a programming superpower.</p>

    <p>Once people discovered that, they started using it and found there  were some other benefits. That’s when rr really started catching on. At  this point, there’s a fair number of people, both at Mozilla and  elsewhere, who have taken to using it for basically all their debugging.” &lt;— Read the whole thing <a href="https://queue.acm.org/detail.cfm?id=3391621">To Catch a Failure: The Record-and-Replay Approach to Debugging</a> and check out <a href="https://rr-project.org/">rr</a></p>
  </li>
  <li>
    <p>Previously: I<a href="http://rolandtanglao.com/2016/09/22/p1-it-is-2016-can-i-debug-R-julia-haskell-like-a-1987-xerox-lisp-machine/">t’s 2016, can I please debug Javascript, R, Julia and Haskell like a 1987 Xerox Lisp Machine?</a></p>
  </li>
</ul>

:ET