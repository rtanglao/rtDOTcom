I"-	<h2 id="pontifications">Pontifications</h2>

<ul>
  <li>I agree with <a href="https://blog.ouseful.info/2017/11/15/programming-meh-lets-teach-how-to-write-computational-essays-instead/">Programming, meh… Let’s Teach How to Write Computational Essays Instead</a> that we should narrate all of our work including software work with online notebooks.</li>
  <li>And if that’s software work or the work includes software then we should use something like Mathematica and Jupyter notebooks that are great at documenting text, computer software code and output from that code.</li>
  <li><a href="https://blog.ouseful.info/2017/11/15/programming-meh-lets-teach-how-to-write-computational-essays-instead/">Read the whole thing but here’s a relevant quote</a></li>
</ul>

<p><strong>QUOTE</strong></p>
<blockquote>
hen we originally drafted the OU/FutureLearn course Learn to Code for Data Analysis (also available on OpenLearn), we wrote the explanatory text – delivered as HTML but including static code fragments and code outputs – as a notebook, and then ‘ran” the notebook to generate static HTML (or markdown) that provided the static course content. These notebooks were complemented by actual notebooks that students could work with interactively themselves.<br /><br />

(Actually, we prototyped authoring both the static text, and the elements to be used in the student notebooks, in a single document, from which the static HTML and “live” notebook documents could be generated: Authoring Multiple Docs from a Single IPython Notebook. )<br /><br />

Whilst the notion of the computational essay as a form is really powerful, I think the added distinction between between generative and generated documents is also useful. For example, a raw Rmd document of Jupyter notebook is a generative document that can be used to create a document containing text, code, and the output generated from executing the code. A generated document is an HTML, Word, or PDF export from an executed generative document.<br /><br />

Note that the generating code can be omitted from the generated output document, leaving just the text and code generated outputs. Code cells can also be collapsed so the code itself is hidden from view but still available for inspection at any time:<br /><br />
</blockquote>

<p><strong>END QUOTE</strong></p>
:ET