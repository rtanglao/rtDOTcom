<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Roland Tanglao</title>
    <description>flickr.com/roland, twitter.com/rtanglao #firefox #thunderbird
</description>
    <link>http://rolandtanglao.com/</link>
    <atom:link href="http://rolandtanglao.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 26 Feb 2020 19:02:53 -0800</pubDate>
    <lastBuildDate>Wed, 26 Feb 2020 19:02:53 -0800</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>Fastpages from fastai I don't fully understand: you still need a server to render python notebooks for testing purposes, right? Altair Python Visualizations seem excellent &amp; Blogging via Word files is great though</title>
        <description>&lt;h1 id=&quot;pontifications&quot;&gt;Pontifications&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;This is why I love the premise of &lt;a href=&quot;https://alpha.iodide.io/&quot;&gt;iodide&lt;/a&gt; as I understand it :  you don’t need a server! Any web browser can run your notebook code just like any web browser can render your static web pages. No extra server required.&lt;/li&gt;
  &lt;li&gt;Anyways,  I am probably over-thinking the need for a server. We will always need servers :-) ! It’s just that in my opinion every node even if it’s just a laptop or better yet phone running a browser should be a server as well as a client!&lt;/li&gt;
  &lt;li&gt;Check out the intro post: &lt;a href=&quot;https://fastpages.fast.ai/fastpages/jupyter/2020/02/21/introducing-fastpages.html&quot;&gt;introducing fastpages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;And then check out Stephen Downe’s attempt to clarify “introducing fastpages” :-) :  &lt;a href=&quot;https://halfanhour.blogspot.com/2020/02/how-to-use-fastpages.html&quot;&gt;How to Use Fastpages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;All in all something I should try!&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 26 Feb 2020 00:00:00 -0800</pubDate>
        <link>http://rolandtanglao.com/2020/02/26/p1-fastpages-notebooks-good-altair-good-i-dont-understand-the-rest-still-need-server/</link>
        <guid isPermaLink="true">http://rolandtanglao.com/2020/02/26/p1-fastpages-notebooks-good-altair-good-i-dont-understand-the-rest-still-need-server/</guid>
        
        
      </item>
    
      <item>
        <title>How To: Fact Check the corona virus aka Covid-19 crisis </title>
        <description>&lt;h1 id=&quot;pontifications&quot;&gt;Pontifications&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;“So often when news reaches us we act like we &lt;em&gt;must&lt;/em&gt; make a decision on &lt;em&gt;this particular&lt;/em&gt; tweet, or post, or website. But the web is abundant! If it’s a true  story there are likely many better sources than the one that happened to find you. And if it is a false one, maybe someone already looked into  that for you. “ &amp;lt;— read the whole thing from  &lt;a href=&quot;https://siftingthroughtheoutbreak.wordpress.com/2020/02/23/find-a-better-source/&quot;&gt;News Search cross-check&lt;/a&gt; on Mike Caulfield’s &lt;a href=&quot;https://siftingthroughtheoutbreak.wordpress.com/&quot;&gt;Sifting Through the Coronavirus Outbreak blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 25 Feb 2020 00:00:00 -0800</pubDate>
        <link>http://rolandtanglao.com/2020/02/25/p1-fact-checking-corona-virus/</link>
        <guid isPermaLink="true">http://rolandtanglao.com/2020/02/25/p1-fact-checking-corona-virus/</guid>
        
        
      </item>
    
      <item>
        <title>The good ole days at Bryght :-) 'Web 1.0' versus 'Web 2.0'</title>
        <description>&lt;h1 id=&quot;pontifications&quot;&gt;Pontifications&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Via &lt;a href=&quot;https://twitter.com/beanjammin/status/1232119216330899459&quot;&gt;Ben&lt;/a&gt; from from August 2004:  &lt;a href=&quot;https://web.archive.org/web/20041013212319/http://www.bryght.com/node/view/50&quot;&gt;Web 2.0 Websites - 1.0 just say NO!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Remember when the internet wasn’t a ‘miasma’ of lies and mis-information back in 2004? Neither do I :-) !&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 24 Feb 2020 00:00:00 -0800</pubDate>
        <link>http://rolandtanglao.com/2020/02/24/p1-the-good-ole-days-at-bryght/</link>
        <guid isPermaLink="true">http://rolandtanglao.com/2020/02/24/p1-the-good-ole-days-at-bryght/</guid>
        
        
      </item>
    
      <item>
        <title>SQLite, JSON, CSV :-) the eternal golden braid of formats? so many tools for normal folks to grok them without programming e.g. sqlitebrowser</title>
        <description>&lt;h1 id=&quot;pontifications&quot;&gt;Pontifications&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;For many years, I thought I needed a “real” database for my hobbyist programming of tshirts and other things. So I learned and used MongoDB starting in 2011 for my Thunderbird support scripts (see &lt;a href=&quot;http://rolandtanglao.com/2011/04/04/mongodb-is-my-current-persistent-data-structure-store-of-choice-aka-how-to-slurp-your-get-satisfaction-data-into-mongodb/&quot;&gt;MongoDB is my current persistent data structure store of choice aka “how to slurp your Get Satisfaction data into MongoDB”&lt;/a&gt; from April 2011)&lt;/li&gt;
  &lt;li&gt;A legacy of growing up with small files and slow disks? i.e. programming since 1977&lt;/li&gt;
  &lt;li&gt;Anyhow it’s the 21st century and you can do everything with SQLite, JSON and CSV up until about what 1-2GB per file, perhaps even larger?&lt;/li&gt;
  &lt;li&gt;In other words, you don’t need MongoDB or indeed any “real database” like PostgreSQL until you have many gigabytes of data! And most small scale projects have less than 1 GB of data in their datasets even in plain text formats like JSON and CSV and in SQLite.&lt;/li&gt;
  &lt;li&gt;And the cool thing is SQLite, JSON and CSV can be consumed, queried and manipulated by “normal” folks without programming using Google Docs for CSV, the numerous tools for JSON and many tools for SQLite like SQLiteBrowser aka &lt;a href=&quot;https://sqlitebrowser.org/&quot;&gt;DB Browser for SQLite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 23 Feb 2020 00:00:00 -0800</pubDate>
        <link>http://rolandtanglao.com/2020/02/23/p1-sqlite-csv-json-the-eternal-golden-braid-sqlitebrowser/</link>
        <guid isPermaLink="true">http://rolandtanglao.com/2020/02/23/p1-sqlite-csv-json-the-eternal-golden-braid-sqlitebrowser/</guid>
        
        
      </item>
    
      <item>
        <title>Payak 2020: 1:40 oops fell 3 times in the first 5km, but mountain view climb was fast because of the klaebo running up hill diagonal stride technique</title>
        <description>&lt;h1 id=&quot;pontifications&quot;&gt;Pontifications&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Payak &lt;a href=&quot;https://zone4.ca/race/2020-02-22/08c387e2/results/&quot;&gt;2020&lt;/a&gt; (on classic skins with fake skins): 1:40 (same time as &lt;a href=&quot;http://rolandtanglao.com/2018/02/26/p1-payak-2018-skate-skiing-140/&quot;&gt;2018&lt;/a&gt; on skate, slower than &lt;a href=&quot;https://www.strava.com/activities/payak-2019-10-minuten-schneller-super-fun-2170380303&quot;&gt;2019&lt;/a&gt; on skate) oops fell 3 times in the first 5km, but mountain view climb was fast because of the &lt;a href=&quot;http://www.xcskiforum.com/viewtopic.php?t=5087&quot;&gt;“klaebo running up hill diagonal stride”&lt;/a&gt; technique, so that’s something positive.&lt;/li&gt;
  &lt;li&gt;Why did I fall so much? I fell on the downhills which is weird for me. I know one of the falls was due to skin sticking. Maybe it was due to the snow which was fast but sticky randomly and finally maybe it was due to the great waxing job the Swix folks did speeding up my downhills? Don’t know it was probably mostly me not having the same core and cardio and less time on classic skis (did a lot of skate on Mondays).&lt;/li&gt;
  &lt;li&gt;I figure if I hadn’t fallen I would have been 5-10 minutes faster! Could have, should have, would have :-) Onwards to 2021!&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe height=&quot;405&quot; width=&quot;590&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot; scrolling=&quot;no&quot; src=&quot;https://www.strava.com/activities/3123321178/embed/0c1b0cb6323732db26e51beb071b6652679c6d76&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Sat, 22 Feb 2020 00:00:00 -0800</pubDate>
        <link>http://rolandtanglao.com/2020/02/22/p1-payak-2020-slower-because-i-fell-3-times-in-first-5-mountain-view-climb-was-fast-klaebo-rules/</link>
        <guid isPermaLink="true">http://rolandtanglao.com/2020/02/22/p1-payak-2020-slower-because-i-fell-3-times-in-first-5-mountain-view-climb-was-fast-klaebo-rules/</guid>
        
        
      </item>
    
      <item>
        <title>Eugene Wallingford: Programming feels like home. &lt;-- To me it feels like a comfortable chesterfield :-) Ton's got a great take on it too #ymmv</title>
        <description>&lt;h1 id=&quot;pontifications&quot;&gt;Pontifications&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;“Sloan reminds us that programming can be – is – more than a line on a  resume. It is something that everyone can do,  and want to do, for a lot of different reasons. It would  be great if programming “were marbled deeply into domesticity and comfort, nerdiness and curiosity, health and love” in  the way that cooking is. That is what makes Computing for All  &lt;strong&gt;really&lt;/strong&gt; worth doing.” &amp;lt;— read Eugene’s  &lt;a href=&quot;http://www.cs.uni.edu/~wallingf/blog/archives/monthly/2020-02.html#e2020-02-18T16_00_24.htm&quot;&gt;Programming Feels like home&lt;/a&gt; which is a fantastic riff on &lt;a href=&quot;http://rolandtanglao.com/2020/02/16/p1-robin-sloan-an-app-home-cooked-meal/&quot;&gt;Robin Sloan: An app can be a home-cooked meal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;And like cooking you don’t have to cook and some don’t want to ever and that’s fine too (you can’t do everything but like cooking I think it’s worth a try at some point in your life)!&lt;/li&gt;
  &lt;li&gt;Bonus take from Ton’s &lt;a href=&quot;https://www.zylstra.org/blog/2020/02/i-am-the-programming-equivalent-of-a-home-cook/&quot;&gt;I am the programming equivalent of a home cook&lt;/a&gt; “Eating better, more  affordably or in a specific way, translates to programming with the  purpose to hone the laptop as your tool of trade and adapt it to your  own personal workflows, making it support and work with your very own  quirks. “&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 20 Feb 2020 00:00:00 -0800</pubDate>
        <link>http://rolandtanglao.com/2020/02/20/p1-programming-feels-like-home-comfy-chesterfield/</link>
        <guid isPermaLink="true">http://rolandtanglao.com/2020/02/20/p1-programming-feels-like-home-comfy-chesterfield/</guid>
        
        
      </item>
    
      <item>
        <title>Imagemagick v7 is much faster than OilyPNG or VIPS for creating images, cropping them and montaging i.e. collaging them</title>
        <description>&lt;h1 id=&quot;pontifications&quot;&gt;Pontifications&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Forgot to mention 2 days ago in &lt;a href=&quot;http://rolandtanglao.com/2020/02/17/p1-how-i-made-art-of-where-tights-berlin/&quot;&gt;How I made Art of Where Tights from Berlin photos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Imagemagick aka magick version 7 even on a “slow” ARM64 processor is much faster at cropping and montaging images (probably because it’s in C/C++) than ruby solutions like VIPS and OilyPNG/ChunkyPNG. See &lt;a href=&quot;http://rolandtanglao.com/2019/01/23/p1-did-you-get-catch-the-error-vips-code-yesterday-oilypng-twice-as-fast/&quot;&gt;Did you catch the bug in yesterday’s vips code? I’ve coded an oily_png version that is at least twice as fast!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Extra bonus about using magick is that you don’t have to write code. You just have to master its arcane syntax :-) which isn’t that bad!&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 19 Feb 2020 00:00:00 -0800</pubDate>
        <link>http://rolandtanglao.com/2020/02/19/p1-magick-is-faster-than-vips-or-ruby-oilypng-chunkypng/</link>
        <guid isPermaLink="true">http://rolandtanglao.com/2020/02/19/p1-magick-is-faster-than-vips-or-ruby-oilypng-chunkypng/</guid>
        
        
      </item>
    
      <item>
        <title>How I made Art of Where Tights from Berlin photos</title>
        <description>&lt;h1 id=&quot;pontifications&quot;&gt;Pontifications&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Through a long and labourious process :-)&lt;/li&gt;
  &lt;li&gt;Actually it’s just a mashup of what came before :-)  (white &lt;a href=&quot;http://rolandtanglao.com/2019/04/07/p1-white-pseudo-camo-artofwhere-tights-from-mozlando2018-ksc-hatched-photos/&quot;&gt;kennedy space center tights&lt;/a&gt;, &lt;a href=&quot;http://rolandtanglao.com/2019/01/20/p1-creating-one-leg-for-zazzle-tights-using-kennedy-space-center-photos-5x5-pixel-patches/&quot;&gt;5x5 patches from KSC&lt;/a&gt; which turned out to impractical so we went with &lt;a href=&quot;http://rolandtanglao.com/2019/01/25/p1-patchwork-quilt-effect-is-better-with-100-pixel-by-100-pixel-patches/&quot;&gt;100x100&lt;/a&gt;). The following is a modified version of  &lt;a href=&quot;https://github.com/rtanglao/rt-berlin-january-2020/blob/master/README.md&quot;&gt;https://github.com/rtanglao/rt-berlin-january-2020/blob/master/README.md&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Here’s how it looks:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot; href=&quot;https://www.flickr.com/photos/roland/49549249887/in/dateposted-public/&quot; title=&quot;&amp;quot;Black-ish&amp;quot; high-quality-artofwhere-berlin2020-leggings&quot;&gt;&lt;img src=&quot;https://live.staticflickr.com/65535/49549249887_76cbabcaf1_w.jpg&quot; width=&quot;400&quot; height=&quot;173&quot; alt=&quot;&amp;quot;Black-ish&amp;quot; high-quality-artofwhere-berlin2020-leggings&quot; /&gt;&lt;/a&gt;&lt;script async=&quot;&quot; src=&quot;//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;16february2020-artofwherecom-tights&quot;&gt;16february2020 artofwhere.com tights&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1. create circular thumbnails&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;BLACK_CIRCULAR
mlr &lt;span class=&quot;nt&quot;&gt;--csv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--implicit-csv-header&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--headerless-csv-output&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 1 black-berlin-january2020.txt &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; just-black-files-berlin-january2020.txt
&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;just-black-files-berlin-january2020.txt | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
parallel magick &lt;span class=&quot;s1&quot;&gt;'{}'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-vignette&lt;/span&gt; 0x0+0+0 &lt;span class=&quot;s1&quot;&gt;'BLACK_CIRCULAR/{/}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;2. make artofwhere graphic
    &lt;ul&gt;
      &lt;li&gt;3400 / 75 px = 46 rows one way i.e. “horizontally”&lt;/li&gt;
      &lt;li&gt;6400 / 75 px = 86 rows the other way “vertically”&lt;/li&gt;
      &lt;li&gt;46 * 86 = 3956 circular thumbnails&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;BLACK_CIRCULAR
&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.jpg | &lt;span class=&quot;nb&quot;&gt;shuf&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 3825 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; right-leg-shuffled-3825-black-jpgs.txt
&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.jpg | &lt;span class=&quot;nb&quot;&gt;shuf&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 3825 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; left-leg-shuffled-3825-black-jpgs.txt
montage &lt;span class=&quot;nt&quot;&gt;-verbose&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-adjoin&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-tile&lt;/span&gt; 45x85 +frame +shadow +label &lt;span class=&quot;nt&quot;&gt;-adjoin&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-geometry&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'75x75+0+0&amp;lt;'&lt;/span&gt; @right-leg-shuffled-3825-black-jpgs.txt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
right-leg_artofwhere_berlin_jan_2020.png
montage &lt;span class=&quot;nt&quot;&gt;-verbose&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-adjoin&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-tile&lt;/span&gt; 45x85 +frame +shadow +label &lt;span class=&quot;nt&quot;&gt;-adjoin&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-geometry&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'75x75+0+0&amp;lt;'&lt;/span&gt; @left-leg-shuffled-3825-black-jpgs.txt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
left-leg_artofwhere_berlin_jan_2020.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;15february2020-get-average-color-of-patches&quot;&gt;15february2020 get average color of patches&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1. get average color&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;a) first get filenames of the patches&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /home/rtanglao/GIT/rt-berlin-january-2020/75PX_BY_75PX_PATCHES/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.jpg  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; berlin_jan2020_75x75_jpg_filenames.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;b) then get average color of the patches&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;berlin_jan2020_75x75_jpg_filenames.txt  | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
../print-file-colorname-hex-color.rb &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; berlin_jan2020_file_colorname_hexcolor.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;c) to get an idea of the number of each colour, cut out the’file’ field which is unique&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mlr &lt;span class=&quot;nt&quot;&gt;--csv&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'file'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.csv | more
&lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;black  berlin_jan2020_file_colorname_hexcolor.csv &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; black-berlin-january2020.txt
&lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;red  berlin_jan2020_file_colorname_hexcolor.csv &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; red-berlin-january2020.txt
&lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;green  berlin_jan2020_file_colorname_hexcolor.csv &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; gren-berlin-january2020.txt
&lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;blue  berlin_jan2020_file_colorname_hexcolor.csv &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; blue-berlin-january2020.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;d) create a file with just the red filenames, no colour or hex colour fields&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mlr &lt;span class=&quot;nt&quot;&gt;--csv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--implicit-csv-header&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--headerless-csv-output&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 1 black-berlin-january2020.txt &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; just-blackfiles-berlin-january2020.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;e) make black circular thumbnails&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;BKACK_CIRCULAR
&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;just-red-files-berlin-january2020.txt | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
parallel magick &lt;span class=&quot;s1&quot;&gt;'{}'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-vignette&lt;/span&gt; 0x0+0+0 &lt;span class=&quot;s1&quot;&gt;'BLACK_CIRCULAR/{/}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;09february2020&quot;&gt;09february2020&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1. how to crop an image to 75x75
    &lt;ul&gt;
      &lt;li&gt;2000, 2000 is the offset from top left (gleaned from &lt;a href=&quot;https://superuser.com/questions/1161340/how-to-crop-an-image-using-imagemagick-from-the-command-line&quot;&gt;How to crop an image using imagemagick from the command line?&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;magick&lt;/code&gt; replaces &lt;code class=&quot;highlighter-rouge&quot;&gt;convert -crop&lt;/code&gt; in imagemagick 7&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;magick dsc_3671_49469147273_o.jpg &lt;span class=&quot;nt&quot;&gt;-crop&lt;/span&gt; 75x75+2000+2000 +repage croptest.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;2. use pixel_x_dimension and pixel_y_dimension from https://github.com/tonytonyjan/exif get width and height&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;3. use this file list:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /mnt/c/Users/rtang/Pictures/23-31JANUARY2020-BERLIN-ALL_HANDS/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.jpg &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; berlin_jpg_filenames.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;4. Create CSV file with max x and max y for 75 pixel by 75 pixel&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/print-file-width-length-max75-x-max75-y.rb berlin_jpg_filenames.txt &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; berlin-75px-75px-max-x-maxy.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;5. Create 1000 75px by 75 px patches. Maybe do 1000 at a time for a total of 10,000 &amp;lt;— I actually did approximately 20,000&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;75PX_BY_75PX_PATCHES
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
../create-75px-75px-patches.rb ../berlin-75px-75px-max-x-maxy.txt 1000
../create-75px-75px-patches.rb ../berlin-75px-75px-max-x-maxy.txt 9000
../create-75px-75px-patches.rb ../berlin-75px-75px-max-x-maxy.txt 1000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Mon, 17 Feb 2020 00:00:00 -0800</pubDate>
        <link>http://rolandtanglao.com/2020/02/17/p1-how-i-made-art-of-where-tights-berlin/</link>
        <guid isPermaLink="true">http://rolandtanglao.com/2020/02/17/p1-how-i-made-art-of-where-tights-berlin/</guid>
        
        
      </item>
    
      <item>
        <title>pup for HTML is like jq for JSON</title>
        <description>&lt;h1 id=&quot;pontifications&quot;&gt;Pontifications&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;“&lt;a href=&quot;https://github.com/ericchiang/pup&quot;&gt;pup&lt;/a&gt; is a command line tool for processing HTML. It reads from stdin, prints to stdout, and allows the user to filter parts of the page using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started/Selectors&quot;&gt;CSS selectors&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Inspired by &lt;a href=&quot;http://stedolan.github.io/jq/&quot;&gt;jq&lt;/a&gt;, pup aims to be a fast and flexible way of exploring HTML from the terminal.”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://rolandtanglao.com/2017/06/20/p1-using-jq-to-minify-json/&quot;&gt;previous jq blog post&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 16 Feb 2020 00:00:00 -0800</pubDate>
        <link>http://rolandtanglao.com/2020/02/16/p2-pup-for-html-like-jq-for-json/</link>
        <guid isPermaLink="true">http://rolandtanglao.com/2020/02/16/p2-pup-for-html-like-jq-for-json/</guid>
        
        
      </item>
    
      <item>
        <title>Robin Sloan: An app can be a home-cooked meal</title>
        <description>&lt;h1 id=&quot;pontifications&quot;&gt;Pontifications&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Juicy quotes which I totally agree with:
    &lt;ul&gt;
      &lt;li&gt;“In a better world, I would have built this in a day using some kind  of modern, flexible HyperCard for iOS, exporting a sturdy, standalone  app that did exactly what I wanted and nothing else.”&lt;/li&gt;
      &lt;li&gt;“In our actual world, I built it in about a week, and roughly half of  that time was spent wrestling with different kinds of code-signing and  identity provisioning and I don’t even know what. I waved some incense  and threw some stones and the gods of Xcode allowed me to pass”&lt;/li&gt;
      &lt;li&gt;“I am the programming equivalent of a home cook.&lt;/li&gt;
      &lt;li&gt;“And, when you free programming from the requirement to be general and professional and scalable, it becomes a different activity altogether, just as cooking at home is  really nothing like cooking in a commercial kitchen. I can report to  you: not only is this different activity rewarding in almost exactly the same way that cooking for someone you love is rewarding, there’s  another feeling, one that persists as you use the app together. I have  struggled with words for this, but/and I think it might be the crux of  the whole thing”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Read the whole thing: &lt;a href=&quot;https://www.robinsloan.com/notes/home-cooked-app/&quot;&gt;Robin Sloan: An app can be a home-cooked meal&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 16 Feb 2020 00:00:00 -0800</pubDate>
        <link>http://rolandtanglao.com/2020/02/16/p1-robin-sloan-an-app-home-cooked-meal/</link>
        <guid isPermaLink="true">http://rolandtanglao.com/2020/02/16/p1-robin-sloan-an-app-home-cooked-meal/</guid>
        
        
      </item>
    
  </channel>
</rss>
